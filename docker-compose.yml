services:
  collector-service:
    build:
      context: .
      dockerfile: ./services/collector-service/Dockerfile
    container_name: collector-service
    ports: 
      - "8080:8080"
    restart: on-failure
    environment: 
      - REDIS_PASSWORD=${POSTGRES_PASSWORD}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - OPEN_WEATHER_API_KEY=${OPEN_WEATHER_API_KEY}
      - OPEN_WEATHER_CITY=${OPEN_WEATHER_CITY}
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app-network
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DBNAME}
    ports: 
      - "5432:5432"
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DBNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  mongodb:
    image: mongo:7
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes: 
      - mongodb-data:/data/db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379-6379"
    restart: on-failure
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  cache-service:
    build:
      context: .
      dockerfile: ./services/cache-service/Dockerfile
    container_name: cache-service
    restart: on-failure
    environment:
      - REDIS_ADDR=redis:6379
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app-network
  persister-service:
    build:
      context: .
      dockerfile: ./services/persister-service/Dockerfile
    container_name: persister-service
    restart: on-failure
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DBNAME=${POSTGRES_DBNAME}
      - POSTGRES_SSLMODE=disable
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network
  api-service:
    build: 
      context: .
      dockerfile: ./services/api-service/Dockerfile
    container_name: api-service
    restart: on-failure
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DBNAME=${POSTGRES_DBNAME}
      - POSTGRES_SSLMODE=disable
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network
  analytics-service:
    build: 
      context: .
      dockerfile: ./services/analytics-service/Dockerfile
    container_name: analytics-service
    restart: on-failure
    environment:
      - MONGO_DBNAME=${MONGO_DBNAME}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
    depends_on:
      mongodb:
        condition: service_healthy
      api-service:
        condition: service_started
    networks:
      - app-network
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    ports: 
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    restart: on-failure
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - collector-service
    networks:
      - app-network
  grafana:
    image: grafana/grafana:10.1.5
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DBNAME=${POSTGRES_DBNAME}
    restart: on-failure
    volumes:
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/dashboards:/etc/grafana/dashboards
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
      - postgres
    networks:
      - app-network
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "19000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    networks:
      - app-network

volumes:
  postgres-data:
  prometheus-data:
  grafana-data:
  mongodb-data:

networks:
  app-network:
    driver: bridge